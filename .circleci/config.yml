version: 2.1

commands:

  skip-if-no-pr:
    steps:
      - run:
          name: Determine PR target branch
          command: |
            if [[ -z "$CIRCLE_PULL_REQUEST" ]]; then
              echo "This is not a pull request" && exit 1
              circleci-agent step halt
            fi

  checkout-all:
    steps:
      - checkout
      - run:
          name: update submodules if relevant
          command: git submodule update --init --recursive

  deb-install-requirements:
    steps:
      - run:
          name: Install python requirements
          command: |
            sudo apt-get update -qqy --fix-missing
            sudo apt install -y s3cmd
            python3 -m pip install jinja2

  s3-upload:
    steps:
      - run:
          name: s3 upload
          shell: /bin/bash -l -eo pipefail
          command: |
            s3cmd --access_key=$AWS_ACCESS_KEY_ID --secret_key=$AWS_SECRET_ACCESS_KEY \
              put -P release/redisgears2*.zip \
              s3://redismodules/redisgears/snapshots/

  docker-generate:
    parameters:
      os_version:
        type: string
      v8_update_headers:
        type: string
      v8_version:
        type: string
    steps:
      - run:
          name: Generate Dockerfile
          shell: /bin/bash -l -eo pipefail
          command: |
            python3 dockerbuilds/generate.py --os_version <<parameters.os_version>> \
              --platform arm64 \
              --v8_update_headers <<parameters.v8_update_headers>> \
              --v8_version <<parameters.v8_version>> \
              --src dockerbuilds/dockerfile.debian.tmpl \
              --os_family ubuntu

  build-macos:

    parameters:
      arch_suffix:
        type: string
      openssl_path:
        type: string
      redis_version:
        type: string
        default: "7.2-rc2"

    steps:
      - checkout-all
      - run:
          name: install dependencies
          shell: /bin/bash -l -eo pipefail
          command: |
            brew install python3 automake openssl@3 wget libtool pkg-config

      - run:
          name: pip install
          command: |
            python3 -m pip install RLTest
            python3 -m pip install -U redis==5.0.0b4
            python3 -m pip install git+https://github.com/RedisLabsModules/RAMP.git@master

      - run:
          name: install rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > install_rust.sh
            sh install_rust.sh -y

      - run:
          name: install redis
          command: |
            wget -q https://redismodules.s3.amazonaws.com/redis-stack/dependencies/redis-<<parameters.redis_version>>-<<parameters.arch_suffix>>.tgz -O redis.tgz
            tar -zxpf redis.tgz
            cp redis-*/* /usr/local/bin
            chmod a+x /usr/local/bin/redis*
      - run:
          name: build and test
          shell: /bin/bash -l -eo pipefail
          environment:
            PKG_CONFIG_PATH: <<parameters.openssl_path>>/lib/pkgconfig
            OPENSSL_PREFIX: <<parameters.openssl_path>>
          command: |
            ${HOME}/.cargo/bin/cargo build --verbose
            ${HOME}/.cargo/bin/cargo build --release --verbose
            ${HOME}/.cargo/bin/cargo test --verbose

      - run:
          name: run python tests
          working_directory: pytests
          command: |
            ./run_tests.sh

      - run:
          shell: /bin/bash -l -eo pipefail
          command: |
            target/release/packer
      - run:
          name: s3 upload
          shell: /bin/bash -l -eo pipefail
          command: |
            s3cmd --access_key=$AWS_ACCESS_KEY_ID --secret_key=$AWS_SECRET_ACCESS_KEY \
              put -P target/release/redisgears2*.zip \
                s3://redismodules/redisgears/snapshots/
jobs:

  build-arm-platforms:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium

    parameters:
      os_version:
        type: string
      v8_update_headers:
        type: string
        default: "no"
      v8_version:
        type: string
        default: default

    steps:
      - checkout-all
      - deb-install-requirements
      - docker-generate:
          os_version: <<parameters.os_version>>
          v8_version: <<parameters.v8_version>>
          v8_update_headers: <<parameters.v8_update_headers>>
      - run:
          name: build docker, copy out the bits
          shell: /bin/bash -l -eo pipefail
          command: |
              docker build --platform arm64 --progress=plain -f dockerbuilds/Dockerfile.generated \
              . \
              -t gears/gears:build
              docker create --name smu gears/gears:build
              docker cp smu:/build/target/release/. release
              ls release
      - s3-upload

  build-arm-pull-request-only:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium

    parameters:
      os_version:
        type: string
      v8_update_headers:
        type: string
        default: "no"
      v8_version:
        type: string
        default: default

    steps:
      - checkout-all
      - skip-if-no-pr
      - deb-install-requirements
      - docker-generate:
          os_version: <<parameters.os_version>>
          v8_version: <<parameters.v8_version>>
          v8_update_headers: <<parameters.v8_update_headers>>
      - run:
          name: build docker, copy out the bits
          shell: /bin/bash -l -eo pipefail
          command: |
              docker build --platform arm64 --progress=plain -f dockerbuilds/Dockerfile.generated \
              . \
              -t gears/gears:build
              docker create --name smu gears/gears:build
              docker cp smu:/build/target/release/. release
              ls release

  build-macos-x64:
    resource_class: macos.x86.medium.gen2
    macos:
      xcode: 12.5.1
    steps:
      - build-macos:
          arch_suffix: "macos-catalina-x86_64"
          openssl_path: "/opt/local/opt/openssl@3"

  build-macos-arm64:
    resource_class: macos.m1.large.gen1
    macos:
      xcode: 14.2.0
    steps:
      - build-macos:
          arch_suffix: "macos-monterey-arm64"
          openssl_path: "/opt/homebrew/opt/openssl@3"

  build-macos-x64-pr-only:
    resource_class: macos.x86.medium.gen2
    macos:
      xcode: 12.5.1
    steps:
      - skip-if-no-pr
      - build-macos:
          arch_suffix: "macos-catalina-x86_64"
          openssl_path: "/opt/local/opt/openssl@3"

  build-macos-arm64-pr-only:
    resource_class: macos.m1.large.gen1
    macos:
      xcode: 14.2.0
    steps:
      - skip-if-no-pr
      - build-macos:
          arch_suffix: "macos-monterey-arm64"
          openssl_path: "/opt/homebrew/opt/openssl@3"


on-pull-request: &on-pull-request
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^\d+\.\d+\.\d+.*$/
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^\d+\.\d+\.\d+.*$/
    tags:
      only:
        - v/^\d+\.\d+\.\d+-rc\d+*$/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

workflows:
  version: 2
  default-flow:
    jobs:

      - build-macos-arm64:
          context: common
          # <<: *on-integ-branch
      - build-macos-x64:
          context: common
          # <<: *on-integ-branch

      # - build-macos-arm64-pr-only:
      #     context: common
      #     <<: *on-pull-request
      # - build-macos-x64-pr-only:
      #     context: common
      #     <<: *on-pull-request

#       - build-arm-pull-request-only:
#           context: common
#           <<: *on-pull-request
#           matrix:
#             parameters:
#               os_version: ["22.04"]

#       - build-arm-platforms:
#           context: common
#           <<: *on-integ-branch
#           matrix:
#             parameters:
#               os_version: ["22.04", "20.04", "18.04"]

# nightly:

#   triggers:
#     - schedule:
#         cron: "5 3 * * Sun-Thu"
#         filters:
#           branches:
#             only:
#               - master

#   jobs:
#     - build-arm-platforms:
#       name: "Nightly build"
#       context: common
#       <<: *on-master
#       matrix:
#         parameters:
#           os_version: ["22.04", "20.04", "18.04"]
#           v8_update_headers: ["yes"]
#           v8_version: ["main"]
