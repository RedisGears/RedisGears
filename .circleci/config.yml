version: 2.1

commands:

  checkout-all:
    steps:
      - checkout
      - run:
          name: update submodules if relevant
          command: git submodule update --init --recursive

  deb-install-requirements:
    steps:
      - run:
          name: Install python requirements
          command: |
            sudo apt-get update -qqy --fix-missing
            sudo apt install -y s3cmd
            python3 -m pip install jinja2

  s3-upload:
    steps:
      - run:
          name: s3 upload
          shell: /bin/bash -l -eo pipefail
          command: |
            s3cmd --access_key=$AWS_ACCESS_KEY_ID --secret_key=$AWS_SECRET_ACCESS_KEY \
              put -P release/redisgears*.zip \
              s3://redismodules/redisgears/snapshots/

  docker-generate:
    parameters:
      os_version:
        type: string
      v8_update_headers:
        type: string
      v8_version:
        type: string
    steps:
      - run:
          name: Generate Dockerfile
          shell: /bin/bash -l -eo pipefail
          command: |
            python3 dockerbuilds/generate.py --os_version <<parameters.os_version>> \
              --platform arm64 \
              --v8_update_headers <<parameters.v8_update_headers>> \
              --v8_version <<parameters.v8_version>> \
              --src dockerbuilds/dockerfile.debian.tmpl \
              --os_family ubuntu

jobs:

  build-arm-platforms:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium

    parameters:
      os_version:
        type: string
      v8_update_headers:
        type: string
        default: "no"
      v8_version:
        type: string
        default: default

    steps:
      - checkout-all
      - deb-install-requirements
      - docker-generate:
          os_version: <<parameters.os_version>>
          v8_version: <<parameters.v8_version>>
          v8_update_headers: <<parameters.v8_update_headers>>
      - run:
          name: build docker, copy out the bits
          shell: /bin/bash -l -eo pipefail
          command: |
              docker build --platform arm64 --progress=plain -f dockerbuilds/Dockerfile.generated \
              . \
              -t gears/gears:build
              docker create --name smu gears/gears:build
              docker cp smu:/build/target/release/. release
              ls release
      - s3-upload

  build-arm-pull-request-only:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium

    parameters:
      os_version:
        type: string
      v8_update_headers:
        type: string
        default: "no"
      v8_version:
        type: string
        default: default

    steps:
      - checkout-all
      - deb-install-requirements
      - docker-generate:
          os_version: <<parameters.os_version>>
          v8_version: <<parameters.v8_version>>
          v8_update_headers: <<parameters.v8_update_headers>>
      - run:
          name: build docker, copy out the bits
          shell: /bin/bash -l -eo pipefail
          command: |
              docker build --platform arm64 --progress=plain -f dockerbuilds/Dockerfile.generated \
              . \
              -t gears/gears:build
              docker create --name smu gears/gears:build
              docker cp smu:/build/target/release/. release
              ls release

on-pull-request: &on-pull-request
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^\d+\.\d+\.\d+.*$/
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^\d+\.\d+\.\d+.*$/
    tags:
      only:
        - /^v\d+\.\d+\.\d+.*-rc*$/
        - /^v\d+\.\d+\.\d+.*-m*$/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

workflows:
  version: 2
  default-flow:
    jobs:

      - build-arm-pull-request-only:
          context: common
          <<: *on-pull-request
          matrix:
            parameters:
              os_version: ["22.04"]

      - build-arm-platforms:
          context: common
          <<: *on-integ-branch
          matrix:
            parameters:
              os_version: ["22.04", "20.04", "18.04"]

nightly:

  triggers:
    - schedule:
        cron: "5 3 * * Sun-Thu"
        filters:
          branches:
            only:
              - master

  jobs:
    - build-arm-platforms:
      name: "Nightly build"
      context: common
      <<: *on-master
      matrix:
        parameters:
          os_version: ["22.04", "20.04", "18.04"]
          v8_update_headers: ["yes"]
          v8_version: ["main"]
