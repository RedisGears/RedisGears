version: 2.1

commands:
  # If this build is from a fork, stop executing the current job and return success.
  # This is useful to avoid steps that will fail due to missing credentials.
  early-return-for-forked-pull-requests:
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful."
              circleci step halt
            fi

  early-returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  setup-executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: true

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            git submodule update --init deps/readies
            ./deps/readies/bin/getpy2

  install-prerequisites:
    parameters:
      redis_version:
        type: string
        default: "6"
      getredis_params:
        type: string
        default: ""
    steps:
      - setup-automation
      - run:
          name: System setup
          command: ./system-setup.py
          no_output_timeout: 30m
      - run:
          name: Install Redis
          command: |
            bash -l -c "python2 ./deps/readies/bin/getredis -v <<parameters.redis_version>> --force <<parameters.getredis_params>>"
            redis-server --version

  save-tests-logs:
    steps:
      - run:
          name: Cleanup test log dir
          command: |
            if [[ -d pytest/logs ]]; then
              cd pytest/logs
              rm -f *.aof *.rdb
            fi
      - store_artifacts:
          path: pytest/logs

  persist-artifacts:
    steps:
      - early-return-for-forked-pull-requests
      - persist_to_workspace:
          root: artifacts
          paths:
            - 'snapshot/*.zip'
            - 'snapshot/*.tgz'
            - 'release/*.zip'
            - 'release/*.tgz'

  build-steps:
    parameters:
      platform:
        type: string
      build_params:
        type: string
        default: ""
      test_params:
        type: string
        default: ""
      redis_version:
        type: string
        default: "6"
      getredis_params:
        type: string
        default: ""
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites:
          redis_version: <<parameters.redis_version>>
          getredis_params: <<parameters.getredis_params>>
      - run:
          name: Build
          command: |
            bash -l -c "make get_deps"
            bash -l -c "make all OS_VERSION=<<parameters.platform>> <<parameters.build_params>> SHOW=1"
      - run:
          name: Test
          command: make test <<parameters.test_params>>
          no_output_timeout: 30m
      - save-tests-logs
      - persist-artifacts

  build-platforms-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - setup-executor
      - checkout-all
      - setup-automation
      - run:
          name: Build for platform
          command: |
            pushd build/docker
            make build $(./version-params) OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH ARTIFACTS=1 TEST=1 SHOW=1
            popd
            logs_d=pytest/logs/<<parameters.platform>>
            mkdir -p $logs_d
            tar -C $logs_d -xzf artifacts/pytest-logs*.tgz
          no_output_timeout: 40m
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Deploy for platform
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH OFFICIAL=0 SHOW=1 VERBOSE=1

          no_output_timeout: 40m
      - persist-artifacts

#----------------------------------------------------------------------------------------------------------------------------------

jobs:
  build-linux-debian:
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-buster
    parameters:
      redis_version:
        type: string
        default: "6"
    steps:
      - build-steps:
          platform: debian
          redis_version: <<parameters.redis_version>>

  valgrind:
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-buster
    steps:
      - build-steps:
          platform: debian
          build_params: VALGRIND=1
          test_params: VALGRIND=1
          getredis_params: --valgrind

  build-platforms:
    parameters:
      platform:
        type: string
    docker:
      - image: debian:buster
    steps:
      - build-platforms-steps:
          platform: <<parameters.platform>>

  build-macos:
    macos:
      xcode: 11.6.0
    steps:
      - run:
          name: Fix macOS setup
          command: |
            # brew update || true
            # workaround for ramp pack failure
            sudo mkdir -p /var/opt/redislabs
            sudo chmod 777 /var/opt/redislabs
      - build-steps:
          platform: macos
      - persist-artifacts

  build-multiarch-docker:
    machine:
      enabled: true
      image: cimg/base:2020.01
    steps:
      - early-returns
      - checkout
      - run:
          name: Setup Docker client experimental features
          command: |
            sudo ./deps/readies/bin/getdocker --just-enable-exp
            docker version
      - run:
          name: Build
          command: |
            cd build/docker
            make build
      - early-return-for-forked-pull-requests
      - run:
          name: Deploy
          command: |
            sudo docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            sudo make publish

  deploy-snapshots:
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-buster
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - attach_workspace:
          at: artifacts
      - run:
          name: Deploy Snapshots to S3
          command: |
            for f in artifacts/snapshot/*.zip artifacts/snapshot/*.tgz; do
              aws s3 cp $f s3://redismodules/redisgears/snapshots/ --acl public-read
            done

  deploy-releases:
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-buster
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - attach_workspace:
          at: artifacts
      - run:
          name: Deploy Releases to S3
          command: |
            for f in artifacts/release/*.zip artifacts/release/*.tgz; do
              aws s3 cp $f s3://redismodules/redisgears/ --acl public-read
            done

  release-automation:
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-buster
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION="$CIRCLE_TAG" VERBOSE=1 TEST=release ./tests/qa/run

  nightly-automation:
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-buster
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION="$CIRCLE_BRANCH" VERBOSE=1 TEST=nightly QUICK=1 ./tests/qa/run


on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      only: /^v[0-9].*/

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2
  default-flow:
    jobs:
      - build-linux-debian:
          <<: *not-on-integ-branch
      - build-linux-debian:
          name: build-with-redis-<< matrix.redis_version >>
          <<: *on-integ-branch
          matrix:
            parameters:
              redis_version: ["6.0", "6.2"]
      - build-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [focal, bionic, xenial, centos7, centos8]
      - valgrind:
          <<: *on-integ-and-version-tags
          # <<: *on-any-branch
      - build-macos:
          <<: *on-integ-and-version-tags
      - build-multiarch-docker:
          context: common
          <<: *never
          # <<: *on-integ-and-version-tags
      - deploy-snapshots:
          context: common
          requires:
            - build-platforms
            - build-macos
          <<: *on-integ-branch
      - deploy-releases:
          context: common
          requires:
            - build-platforms
            - build-macos
          <<: *on-version-tags
      - release-automation:
          <<: *on-version-tags
          requires:
            - deploy-releases

  nightly:
    triggers:
      - schedule:
          cron: "20 17 * * 0,3"
          filters:
            branches:
              only: master
    jobs:
      - build-macos
      - valgrind
      - build-linux-debian:
          name: build-with-redis-<< matrix.redis_version >>
          matrix:
            parameters:
              redis_version: ["6.0", "6.2"]
